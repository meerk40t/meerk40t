#!/usr/bin/env python
#
# generated by wxGlade 0.9.3 on Mon Dec 30 01:30:50 2019
#

import wx

from meerk40t.core.units import Length
from meerk40t.gui.choicepropertypanel import ChoicePropertyPanel
from meerk40t.gui.icons import icon_rotary
from meerk40t.gui.mwindow import MWindow
from meerk40t.gui.wxutils import (
    ScrolledPanel,
    StaticBoxSizer,
    TextCtrl,
    dip_size,
    wxButton,
    wxCheckBox,
    wxRadioBox,
    wxStaticText,
)
from meerk40t.kernel import signal_listener

_ = wx.GetTranslation


class HelperPanelChuck(ScrolledPanel):
    def __init__(self, *args, context=None, node=None, **kwds):
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.context = context
        self.test_buttons = []
        for angle in (-360, -180, -90, 90, 180, 360):
            self.test_buttons.append(
                wxButton(self, wx.ID_ANY, f"{angle}°", size=(50, -1))
            )
            self.test_buttons[-1].SetToolTip(
                _("Rotate to {angle}°").format(angle=angle)
            )
            self.Bind(wx.EVT_BUTTON, self.on_rotate(angle), self.test_buttons[-1])
        self.txt_position = TextCtrl(self, wx.ID_ANY, "", limited=True)
        self.txt_position.Enable(False)
        self.btn_plus = wxButton(self, wx.ID_ANY, "+")
        self.btn_plus.SetToolTip(_("Shift to right by 1mm / by 10mm on right click"))
        self.btn_minus = wxButton(self, wx.ID_ANY, "-")
        self.btn_minus.SetToolTip(_("Shift to left by 1mm / by 10mm on right click"))
        self.check_show = wxCheckBox(self, wx.ID_ANY, _("Show"))
        self.check_show.SetToolTip(
            _("Show the current position of the rotary axis in the preview.")
        )

        self.__do_layout()
        self.__do_logic()

    def __do_layout(self):
        self.sizer = StaticBoxSizer(self, wx.ID_ANY, _("Setup Helper"), wx.VERTICAL)
        sizer_buttons = StaticBoxSizer(
            self, wx.ID_ANY, _("Test rotation..."), wx.HORIZONTAL
        )
        for button in self.test_buttons:
            sizer_buttons.Add(button, 0, wx.EXPAND, 0)
        self.sizer.Add(sizer_buttons, 0, wx.EXPAND, 0)
        sizer_offset = StaticBoxSizer(
            self, wx.ID_ANY, _("Rotary position"), wx.HORIZONTAL
        )
        sizer_offset.Add(self.txt_position, 0, 0, 0)
        sizer_offset.Add(self.btn_minus, 0, 0, 0)
        sizer_offset.Add(self.btn_plus, 0, 0, 0)
        sizer_offset.AddSpacer(10)
        sizer_offset.Add(self.check_show, 0, 0, 0)
        self.sizer.Add(sizer_offset, 0, wx.EXPAND, 0)
        self.SetSizer(self.sizer)

    def __do_logic(self):
        self.Bind(wx.EVT_BUTTON, self.on_position(+1), self.btn_plus)
        self.btn_plus.Bind(wx.EVT_RIGHT_DOWN, self.on_position(+10))
        self.Bind(wx.EVT_BUTTON, self.on_position(-1), self.btn_minus)
        self.btn_minus.Bind(wx.EVT_RIGHT_DOWN, self.on_position(-10))
        self.Bind(wx.EVT_CHECKBOX, self.on_check_show, self.check_show)

    def pane_show(self):
        # Nothing to be done here, as the values are set in the rotary settings panel
        service = self.context.device
        zero_pos = Length(
            f"{service.rotary.rotary_chuck_offset*100}%",
            relative_length=service.view.width
            if service.rotary.rotary_chuck_alignment_axis == 0
            else service.view.height,
        )
        self.txt_position.SetValue(zero_pos.length_mm)

    def pane_hide(self):
        # Nothing to be done here, as the values are set in the rotary settings panel
        return

    def on_position(self, offset):
        def handler(event):
            if self.context.device.rotary.rotary_chuck_offset is None:
                return
            current_offset = self.context.device.rotary.rotary_chuck_offset
            min_val = 0
            max_val = float(
                self.context.device.view.width
                if self.context.device.rotary.rotary_chuck_alignment_axis == 0
                else self.context.device.view.height
            )
            l_offset = Length(f"{current_offset*100}%", relative_length=max_val)
            l_offset += Length(f"{offset}mm")
            newval = max(float(l_offset), min_val)
            newval = min(newval, max_val)
            self.context.device.rotary.rotary_chuck_offset = newval / max_val
            self.context.signal("rotary_chuck_offset", newval)
            self.txt_position.SetValue(Length(newval).length_mm)

        return handler

    def on_check_show(self, event=None):
        self.stop_display()
        if self.check_show.IsChecked():
            self.start_display()

    def on_rotate(self, angle):
        def handler(event):
            self.context(f"rotary rotate_absolute {angle}\n")

        return handler

    def start_display(self):
        self.job_active = True

    def stop_display(self):
        if self.job_active:
            self.job_active = False


class HelperPanelRoller(ScrolledPanel):
    def __init__(self, *args, context=None, node=None, **kwds):
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.context = context
        self.radio_roller = wxRadioBox(
            self, wx.ID_ANY, _("Rotation-Axis"), choices=["X", "Y"], majorDimension=0
        )
        self.radio_roller.SetToolTip(_("Select the rotation axis of the roller"))
        self.text_rotary_roller_circumference = TextCtrl(
            self,
            wx.ID_ANY,
            "50.0mm",
            check="length",
            limited=True,
            style=wx.TE_PROCESS_ENTER,
        )
        self.text_rotary_object_circumference = TextCtrl(
            self,
            wx.ID_ANY,
            "50.0mm",
            check="length",
            limited=True,
            style=wx.TE_PROCESS_ENTER,
        )
        for ctrl in (
            self.text_rotary_roller_circumference,
            self.text_rotary_object_circumference,
        ):
            ctrl.SetMinSize(dip_size(self, 80, -1))
            ctrl.SetToolTip(_("Circumference of roller or object"))
            ctrl.SetActionRoutine(self.on_calculate)

        self.btn_calculate = wxButton(self, wx.ID_ANY, _("Calculate"))
        self.btn_calculate.SetToolTip(_("Calculate the steps for the rotary roller"))
        self.__do_layout()
        self.__do_logic()

    def __do_layout(self):
        self.sizer = StaticBoxSizer(self, wx.ID_ANY, _("Setup Helper"), wx.VERTICAL)
        sizer_calculate = StaticBoxSizer(self, wx.ID_ANY, _("Calculate"), wx.VERTICAL)
        sizer_calculate.Add(self.radio_roller, 0, wx.EXPAND, 0)
        label_mm1 = wxStaticText(self, wx.ID_ANY, _("Circumference of roller"))
        sizer_calculate.Add(label_mm1, 0, 0, 0)
        sizer_calculate.Add(self.text_rotary_roller_circumference, 0, 0, 0)

        label_mm2 = wxStaticText(
            self, wx.ID_ANY, _("Circumference of object on roller")
        )
        sizer_calculate.Add(label_mm2, 0, 0, 0)
        sizer_calculate.Add(self.text_rotary_object_circumference, 0, 0, 0)
        sizer_calculate.Add(self.btn_calculate, 0, 0, 0)
        label_info = wxStaticText(
            self,
            wx.ID_ANY,
            _(
                "Notabene: the resulting factor is valid for all objects on the roller,\nand needs only to be established once."
            ),
        )
        sizer_calculate.Add(label_info, 0, wx.EXPAND, 0)

        self.sizer.Add(sizer_calculate, 0, wx.EXPAND, 0)
        self.context.themes.set_window_colors(self)
        self.SetHelpText("rotaryroller_helper")
        self.SetSizer(self.sizer)
        self.Layout()
        self.SetupScrolling()

    def __do_logic(self):
        # self.Bind(wx.EVT_TEXT, self.on_text_rotary_roller_circumference, self.text_rotary_roller_circumference)
        # self.Bind(wx.EVT_TEXT, self.on_text_rotary_object_circumference, self.text_rotary_object_circumference)
        is_x = self.context.device.rotary.scale_y == 1.0
        self.radio_roller.SetSelection(0 if is_x else 1)
        self.Bind(wx.EVT_BUTTON, self.on_calculate, self.btn_calculate)
        self.Bind(wx.EVT_RADIOBOX, self.on_radio_roller, self.radio_roller)

    def pane_show(self):
        # Nothing to be done here, as the values are set in the rotary settings panel
        return

    def pane_hide(self):
        # Nothing to be done here, as the values are set in the rotary settings panel
        return

    def on_calculate(self, event=None):
        roller_circumference = self.text_rotary_roller_circumference.GetValue()
        object_circumference = self.text_rotary_object_circumference.GetValue()
        if not roller_circumference or not object_circumference:
            return
        try:
            l_roller = float(Length(roller_circumference))
            l_object = float(Length(object_circumference))
        except ValueError:
            return
        if l_roller <= 0 or l_object <= 0:
            wx.MessageBox(
                _("Circumference values must be greater than 0."),
                _("Error"),
                wx.OK | wx.ICON_ERROR,
            )
            return
        factor = l_roller / l_object
        if self.radio_roller.GetSelection() == 0:
            self.context.device.rotary.rotary_scale_x = factor
            self.context.device.rotary.rotary_scale_y = 1.0
        else:
            self.context.device.rotary.rotary_scale_x = 1.0
            self.context.device.rotary.rotary_scale_y = factor
        # print(
        #     f"Roller factor: {factor} -> {self.context.device.rotary.rotary_scale_x}, {self.context.device.rotary.rotary_scale_y}"
        # )
        self.context.signal("rotary_scale_x", self.context.device.rotary.rotary_scale_x)
        self.context.signal("rotary_scale_y", self.context.device.rotary.rotary_scale_y)

    def on_radio_roller(self, event=None):
        sx = self.context.device.rotary.rotary_scale_x
        sy = self.context.device.rotary.rotary_scale_y
        factor = sx if sx != 1.0 else sy
        if self.radio_roller.GetSelection() == 0:
            self.context.device.rotary.rotary_scale_y = 1.0
            self.context.device.rotary.rotary_scale_x = factor
        else:
            self.context.device.rotary.rotary_scale_y = factor
            self.context.device.rotary.rotary_scale_x = 1.0
        self.context.signal("rotary_scale_x", self.context.device.rotary.rotary_scale_x)
        self.context.signal("rotary_scale_y", self.context.device.rotary.rotary_scale_y)


class RotarySettings(MWindow):
    def __init__(self, *args, **kwds):
        super().__init__(350, 250, *args, **kwds)
        self.panels = []
        self.has_roller = getattr(self.context.device, "supports_rotary_roller", False)
        self.has_chuck = getattr(self.context.device, "supports_rotary_chuck", False)

        if self.has_roller:
            self.roller_panel = ChoicePropertyPanel(
                self, wx.ID_ANY, context=self.context.device, choices="rotary_roller"
            )
            self.helper_panel_roller = HelperPanelRoller(
                self, wx.ID_ANY, context=self.context
            )
            self.sizer_roller = wx.BoxSizer(wx.HORIZONTAL)
            self.sizer_roller.Add(self.roller_panel, 1, wx.EXPAND, 0)
            self.sizer_roller.Add(self.helper_panel_roller, 1, wx.EXPAND, 0)
            self.sizer.Add(self.sizer_roller, 2, wx.EXPAND, 0)
            self.panels.extend((self.roller_panel, self.helper_panel_roller))
        if self.has_chuck:
            self.chuck_panel = ChoicePropertyPanel(
                self, wx.ID_ANY, context=self.context.device, choices="rotary_chuck"
            )
            self.helper_panel_chuck = HelperPanelChuck(
                self, wx.ID_ANY, context=self.context
            )
            self.sizer_chuck = wx.BoxSizer(wx.HORIZONTAL)
            self.sizer_chuck.Add(self.chuck_panel, 1, wx.EXPAND, 0)
            self.sizer_chuck.Add(self.helper_panel_chuck, 1, wx.EXPAND, 0)

            self.sizer.Add(self.sizer_chuck, 2, wx.EXPAND, 0)
            self.panels.extend((self.chuck_panel, self.helper_panel_chuck))
        if self.has_roller or self.has_chuck:
            self.common_panel = ChoicePropertyPanel(
                self, wx.ID_ANY, context=self.context.device, choices="rotary_common"
            )
            self.sizer.Add(self.common_panel, 1, wx.EXPAND, 0)
            self.panels.append(self.common_panel)
        for panel in self.panels:
            self.add_module_delegate(panel)
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(icon_rotary.GetBitmap())
        self.SetIcon(_icon)
        self.SetTitle(_("Rotary-Settings"))
        self.restore_aspect(honor_initial_values=True)

    def window_open(self):
        for panel in self.panels:
            panel.pane_show()

    def window_close(self):
        for panel in self.panels:
            panel.pane_hide()

    @staticmethod
    def submenu():
        return "Device-Settings", "Rotary-Settings"

    @staticmethod
    def helptext():
        return _("Activate and configure rotary")

    @signal_listener("rotary_scale_x")
    @signal_listener("rotary_scale_y")
    @signal_listener("rotary_flip_x")
    @signal_listener("rotary_flip_y")
    @signal_listener("rotary_active_chuck")
    @signal_listener("rotary_active_roller")
    @signal_listener("rotary_chuck_offset")
    def signal_rotary(self, *args, **kwargs):
        if self.has_roller:
            self.roller_panel.reload()
        if self.has_chuck:
            self.chuck_panel.reload()
            self.helper_panel_chuck.pane_show()
