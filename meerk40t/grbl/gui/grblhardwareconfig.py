#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Mon Nov 13 07:33:41 2023
#

import threading

import wx
from kernel import signal_listener

from meerk40t.grbl.controller import hardware_settings
from meerk40t.gui.icons import icons8_curly_brackets
from meerk40t.gui.mwindow import MWindow
from meerk40t.gui.wxutils import EditableListCtrl, ScrolledPanel, dip_size

_ = wx.GetTranslation


class GrblIoButtons(wx.Panel):
    def __init__(self, *args, context=None, **kwds):
        self.service = context
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)

        self.button_refresh = wx.Button(self, wx.ID_ANY, "Refresh")
        sizer_2.Add(self.button_refresh, 1, 0, 0)
        self.Bind(wx.EVT_BUTTON, self.on_button_refresh, self.button_refresh)

        # self.button_write = wx.Button(self, wx.ID_ANY, "Write")
        # sizer_2.Add(self.button_write, 1, 0, 0)
        #
        # self.button_export = wx.Button(self, wx.ID_ANY, "Export")
        # sizer_2.Add(self.button_export, 1, 0, 0)

        self.SetSizer(sizer_2)

    def on_button_refresh(self, event):
        self.service("gcode $$\n")


class GrblHardwareProperties(ScrolledPanel):
    def __init__(self, *args, context=None, **kwds):
        self.service = context
        kwds["style"] = kwds.get("style", 0)
        ScrolledPanel.__init__(self, *args, **kwds)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        chart = EditableListCtrl(
            self,
            wx.ID_ANY,
            style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES | wx.LC_SINGLE_SEL,
        )
        self.chart = chart
        self.build_columns()
        self.fill_chart()

        chart.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.on_label_start_edit)
        chart.Bind(wx.EVT_LIST_END_LABEL_EDIT, self.on_label_end_edit)

        sizer_1.Add(self.chart, 8, wx.EXPAND, 0)

        self.io_panel = GrblIoButtons(self, wx.ID_ANY, context=self.service)
        sizer_1.Add(self.io_panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)

    def build_columns(self):
        chart = self.chart
        for column, width in (
            ("$#", 60),
            ("Parameter", 200),
            ("Value", 100),
            ("Unit", 100),
            ("Description", 1000),
        ):
            chart.AppendColumn(
                column,
                format=wx.LIST_FORMAT_LEFT,
                width=width,
            )

    def fill_chart(self):
        chart = self.chart
        chart.DeleteAllItems()
        settings = hardware_settings
        for i in range(200):
            d = settings(i)
            if d is None:
                continue
            if i in self.service.hardware_config:
                value = str(self.service.hardware_config[i])
            else:
                value = ""
            ignore, parameter, units = d

            row_id = chart.InsertItem(chart.GetItemCount(), f"${i}")
            chart.SetItem(row_id, 1, str(parameter))
            chart.SetItem(row_id, 2, str(value))
            chart.SetItem(row_id, 3, str(units))
            chart.SetItem(row_id, 4, str(parameter.upper()))

    def on_label_start_edit(self, event):
        event.Allow()

    def on_label_end_edit(self, event):
        row_id = event.GetIndex()  # Get the current row
        col_id = event.GetColumn()  # Get the current column
        new_data = event.GetLabel()  # Get the changed data
        self.chart.SetItem(row_id, col_id, new_data)

    @signal_listener("grbl:hwsettings")
    def hardware_settings_changed(self, origin, *args):
        self.fill_chart()

    def pane_show(self):
        pass

    def pane_hide(self):
        return


# end of class GrblHardwareProperties


class GRBLHardwareConfig(MWindow):
    def __init__(self, *args, **kwds):
        super().__init__(1000, 500, *args, **kwds)
        self.service = self.context.device
        self.SetTitle(_("GRBL Hardware Config"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(icons8_curly_brackets.GetBitmap())
        self.SetIcon(_icon)

        self.hw_panel = GrblHardwareProperties(self, wx.ID_ANY, context=self.service)
        self.Layout()
        self._opened_port = None
        # end wxGlade

    def window_open(self):
        self.hw_panel.pane_show()

    def window_close(self):
        self.hw_panel.pane_hide()

    def delegates(self):
        yield self.hw_panel

    @staticmethod
    def submenu():
        return "Device-Control", "GRBL Hardware Config"
